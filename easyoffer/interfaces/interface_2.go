package main

/*

Type assertion (утверждение типа) в Golang — это конструкция, которая позволяет проверить, 
содержит ли переменная интерфейсного типа (например, interface{}) конкретное значение 
определённого типа, и если да, получить это значение для дальнейшей работы.

Синтаксис i.(T) проверяет, является ли значение i типа T, а `i.(T) ` возвращает 
два значения: само значение типа T и булеву переменную ok, указывающую на успешность операции. 

Type assertion между интерфейсами работает если внутренний тип реализует оба интерфейса

Type assertion используется для упрощения работы с неизвестными типами:  
Когда вы получаете значение интерфейсного типа, но знаете, что оно на 
самом деле является определённым типом, type assertion позволяет вам 
работать с ним более эффективно. 

*/

type Foo struct{}

func (f *Foo) A() {}
func (f *Foo) B() {}
func (f *Foo) C() {}

type AB interface {
  A()
  B()
}

type BC interface {
  B()
  C()
}

func main() {
  //var a int
  var f AB = &Foo{}
  y := f.(BC) // сработает ли такой type-assertion? да
  y.A()       // а этот вызов? нет 
  _ = y
}