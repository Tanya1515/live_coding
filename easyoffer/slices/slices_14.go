package main

import "fmt"

type target struct {
	a int8
	b int64
	c int8
	d int64
	e int32
}

/*

int8 (8-битное целое со знаком)
Минимум: -128
Максимум: 127

int16 (16-битное целое со знаком)
Минимум: -32,768
Максимум: 32,767

int32 (32-битное целое со знаком)
Минимум: -2,147,483,648
Максимум: 2,147,483,647

int64 (64-битное целое со знаком)
Минимум: -9,223,372,036,854,775,808
Максимум: 9,223,372,036,854,775,807

uint8 (8-битное беззнаковое)
Минимум: 0
Максимум: 255

uint16 (16-битное беззнаковое)
Минимум: 0
Максимум: 65,535

uint32 (32-битное беззнаковое)
Минимум: 0
Максимум: 4,294,967,295

uint64 (64-битное беззнаковое)
Минимум: 0
Максимум: 18,446,744,073,709,551,615

*/

func main() {
	targets := make([]target, 0, 1e7) // 1e7 - 10 миллионов

	// будет переполнение, поскольку int8 имеет диапозон от -128 до 127
	// для int64 диапазоны: 
	// для int32 диапазоны: 
	for i := 0; i < cap(targets); i++ {
		targets = append(targets, target{int8(i + 1), int64(i + 2), int8(i + 3), int64(i + 4), int32(i + 5)})
	}

	doSomething(targets)
	fmt.Println(targets)
}
func doSomething(targets []target) {}
