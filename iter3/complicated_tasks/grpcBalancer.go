package main

import "time"

/*

Полное условие: Реализуйте балансировщик для gRPC с health-check'ами.

Требования:

 - Round-robin выбор при здоровых нодах
 - Circuit breaker при ошибках
 - Экспоненциальный backoff для health-check'ов
 - Поддержка ResolveNow
 - Метрики состояния нод

Тесты:

 - Поведение при падении ноды
 - Распределение запросов
 - Восстановление после failure

*/

type BalancerConfig struct {
	HealthCheckInterval time.Duration
	HealthCheckTimeout  time.Duration
	MaxFails            int
}

type customBalancer struct {
	// реализация grpc.Balancer
}

func NewBuilder(cfg BalancerConfig) grpc.Builder {
	// ...

}

// HealthChecker должен проверять доступность эндпоинта

type HealthChecker interface {
	Check(addr string) (bool, error)
}

/*

Circuit breaker - специальный паттерн, который регулирует отправку запросов.

Этот паттерн основывается на трех состояниях: закрытое, открытое и полуоткрытое.

Закрытое состояние - состояние, в котором можно проходить к защищаемому сервису.
То есть это нормальное рабочее состояние. В этом состоянии отслеживается количество неудачных запросов.
Если число ошибок не превышает определенный попрог - circuit breaker продолжает оставаться в закрытом состоянии.
Обычно ведется учет по времени ответа и количеству неудачных запросов.


Открытое состояние - состояние, в котором блокируются любые попытки выполнить запрос к защищаемому сервису.
Это профилактическая мера, которая проводится, чтобы сервис могут перезагрузится или починится. Переход в открытое
состояние происходит, когда количество неудачных запросов превышает некоторый порог (этот попрог может быть определен
количеством ошибок, временем ответа, комбинацией обоих факторов). После перехода в открытое состояние circuit breaker
находится в этом состоянии некоторый период времени.

Полуоткрытое соединение - переходное состояние, в котором circuit breaker переходит в полуоткрытое состояние. В этом состоянии
circuit breaker может частично отправлять запросы сервису, чтобы протестировать его доступность и надежность. После истечения времени
ожидания в открытом состоянии, circuit breaker переходит в полуоткрытое состояние. В этом состоянии он позволяет ограниченному
количеству запросов пройти к сервису. Если эти запросы успешно обработаны и не вызывают ошибок, circuit breaker возвращается
в закрытое состояние, считая, что проблемы с сервисом устранены. Если в полуоткрытом состоянии снова обнаруживаются ошибки,
circuit breaker снова переходит в открытое состояние, причем время ожидания начинает отсчитываться заново.

Есть несколько подходов для определения необходимости активации Circuit Breaker

1) Порог ошибок (Error threshold) - переход в открытое состояние определяется,
когда количество ошибок превышено заданный попрог в определенном временном интервале.

2) Процентный попрог ошибок - фиксируется общее количество запросов, а также количество неудачных запросов.
Circuit breaker активируется, когда процент ошибок от общего числа превышает заданный уровень. При достижении
определенного процента неудачных запросов circuit breaker активируется. Но после истечения определенного количества
времени процент ошибочных запросов сбрасывается.

3) Оценка времени ответа. Активация circuit breaker происходит, если среднее время ответа превышает установленный порог.
Причем считается среднее время отклика сервиса за указанный промежуток.

4) Можно использовать гибридный метод: отслеживание времени отклика запроса и количество неудачно завершившихся запросов.


ResolveNow в балансировщике gRPC — это механизм для принудительного обновления списка серверов,
позволяющий быстрее реагировать на изменения в инфраструктуре и улучшающий отказоустойчивость.

В этом варианте балансировщик должен один раз в некоторый период запраивать информацию о существующих
сервисах у некоторого стороннего сервиса, например, DNS, Service Discovery и так далее.
И при обнаружении новых узлов в принудительном формате добавлять новые хосты в список сервисов
для перенаправления запросов.

Метрики. Предполагаемый список метрик:

RED:

Rate - количество запросов.
Errors - количество ошибок.
Duration - время обработки одного запроса.

*/
